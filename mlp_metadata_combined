from sklearn.neural_network import MLPClassifier
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import os
from pandas.api.types import CategoricalDtype 
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import csv 

# Load revision labels
revisions_path = "/data/home/cos557/data/rothman/parsed_xray_files_log.csv"
df_revisions = pd.read_csv(revisions_path)
df_revisions["patient_id"] = df_revisions["patient_id"].astype(int)
df_revisions = df_revisions.sort_values(by=["patient_id", "postop_days"])
df_revisions = df_revisions.drop_duplicates(subset=["patient_id"], keep="last")
revision_labels = dict(zip(df_revisions["patient_id"], df_revisions["revision_status"]))
revision_labels = {pid: 1 if status > 0 else 0 for pid, status in revision_labels.items()}

# Load metadata
metadata = "/data/home/cos557/data/rothman/TAR_Sheet_fo_stats_SGP_7_9_24_output4.csv"
df_metadata = pd.read_csv(metadata)

# Filter metadata for patients who have revision data
df_metadata = df_metadata[df_metadata["ID"].isin(df_revisions["patient_id"])]
print(df_metadata)

# extract  metadata of interest into list inside dictionary 
columns = ['Age', 'Race (White= 0, Black= 1, Asian= 2, Hispanic= 3, More than 1= 4, Other/No report=5)', 'sex (m=0, f=1)', 'BMI']

metadata_labels = {}

df_metadata = pd.DataFrame(df_metadata)

for index, row in df_metadata.iterrows():
  key = row['ID']
  vector = row[columns].values.tolist()
  metadata_labels[key] = vector
  
print(metadata_labels)

# create new dataframe for ID, Age-Race, revision status
df = df_metadata[["ID", "Age-Race"]].copy()
df["revision_status"] = df["ID"].map(revision_labels)

X = df[["Age-Race_Labels"]].astype(float)
y = df["revision_status"].astype(int)

#### TRAIN/TEST SPLIT ####
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#### MLP CLASSIFIER ####
mlp = MLPClassifier(hidden_layer_sizes=(64,), max_iter=1000, random_state=42)
mlp.fit(X_train, y_train)
y_pred = mlp.predict(X_test)

# Evaluation metrics
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
